@{
    ViewData["Title"] = "Admin Dashboard";
}

<head>
    <link rel="stylesheet" href="~/css/admin.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>

<div class="admin-container">
    <!-- SOL SIDEBAR -->
    <aside class="admin-sidebar">
        <div class="profile-section">
            <img src="https://i.pravatar.cc/150?u=davidpeters" alt="Admin Avatar">
            <div>
                <div class="name">David Peters</div>
                <div class="role">superadmin</div>
            </div>
        </div>
        <ul class="nav-menu">
            <li><a href="#" class="active"><i class="fa-solid fa-chart-pie"></i> Overview</a></li>
            <li><a href="#"><i class="fa-solid fa-users"></i> Users</a></li>
            <li><a href="#"><i class="fa-solid fa-user-shield"></i> Admin</a></li>
        </ul>
    </aside>

    <!-- ANA İÇERİK -->
    <main class="main-content">
        <div class="content-grid">
            
            <!-- İSTATİSTİK KARTLARI -->
            <div class="stats-grid">
                <div class="stat-card dark">
                    <div class="card-header">
                        <span>Visits</span> <i class="fa-solid fa-arrow-trend-up"></i>
                    </div>
                    <div class="stat-value">3,671</div>
                    <div class="stat-change negative">-0.03%</div>
                </div>
                <div class="stat-card blue">
                    <div class="card-header">
                        <span>New Users</span> <i class="fa-solid fa-arrow-trend-up"></i>
                    </div>
                    <div class="stat-value">256</div>
                    <div class="stat-change positive">+15.03%</div>
                </div>
                <div class="stat-card dark">
                    <div class="card-header">
                        <span>Online Now</span> <i class="fa-solid fa-arrow-trend-up"></i>
                    </div>
                    <div class="stat-value" id="online-user-counter">0</div>
                    <div class="stat-change positive" real-time></div>
                </div>
            </div>

            <!-- KULLANICI GRAFİĞİ -->
            <div class="card">
                <div class="card-header">
                    <div class="card-tabs">
                        <span class="active">Users</span>
                        <span>Projects</span>
                        <span>Operating Status</span>
                    </div>
                    <div class="card-actions">
                        <button class="btn-filter">Week <i class="fa-solid fa-chevron-down"></i></button>
                        <button class="btn-icon"><i class="fa-solid fa-arrows-left-right"></i></button>
                        <button class="btn-icon"><i class="fa-solid fa-ellipsis"></i></button>
                    </div>
                </div>
                <div class="chart-container">
                    <canvas id="usersChart"></canvas>
                </div>
            </div>

            <!-- MESAJ TRAFİĞİ GRAFİĞİ -->
             <div class="card">
                <div class="card-header">
                     <h5 class="card-title">Users Message Traffic</h5>
                     <div class="card-actions">
                         <button class="btn-icon"><i class="fa-solid fa-ellipsis"></i></button>
                     </div>
                </div>
                 <div class="chart-container">
                    <canvas id="messageTrafficChart"></canvas>
                 </div>
            </div>

        </div>
    </main>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
      
        document.addEventListener("DOMContentLoaded", function () {

            loadDashboardStats();

            loadUserChart();
            loadMessageTrafficChart();
            fetchOnlineUsers();
            setInterval(loadOnlineUserCount,10000);
            function fetchOnlineUsers() {
                fetch('/Account/GetActiveUsersCount') 
                    .then(response => response.json())
                    .then(count => {
                        
                        document.getElementById('online-user-counter').textContent = count;
                    })
                    .catch(error => {
                        console.error('Online kullanıcı sayısı yüklenirken hata:', error);
                        document.getElementById('online-user-counter').textContent = '0';
                    });
            }

            function loadDashboardStats() {
                fetch('/Account/GetDashboardStats')
                    .then(response => response.json())
                    .then(data => {
                        if (data.error) {
                            console.error('İstatistik hatası:', data.error);
                            return;
                        }

                        // İstatistik kartlarını güncelle
                        document.querySelector('.stat-card:nth-child(1) .stat-value').textContent = data.totalUsers.toLocaleString();
                        document.querySelector('.stat-card:nth-child(2) .stat-value').textContent = data.newUsers.toLocaleString();
                        document.querySelector('.stat-card:nth-child(3) .stat-value').textContent = data.activeUsers.toLocaleString();

                        // Büyüme yüzdesini güncelle
                        const growthElement = document.querySelector('.stat-card:nth-child(2) .stat-change');
                        growthElement.textContent = `${data.userGrowth >= 0 ? '+' : ''}${data.userGrowth}%`;
                        growthElement.className = `stat-change ${data.userGrowth >= 0 ? 'positive' : 'negative'}`;
                    })
                    .catch(error => {
                        console.error('İstatistikler yüklenirken hata:', error);
                    });
            }

            // Kullanıcı grafiğini yükle
            function loadUserChart() {
                fetch('/Account/GetUserChartData')
                    .then(response => response.json())
                    .then(data => {
                        if (data.error) {
                            console.error('Kullanıcı grafiği hatası:', data.error);
                            return;
                        }

                        const usersChartCtx = document.getElementById('usersChart').getContext('2d');

                        // Degrade arkaplan rengi oluşturma
                        const usersChartGradient = usersChartCtx.createLinearGradient(0, 0, 0, 300);
                        usersChartGradient.addColorStop(0, 'rgba(74, 105, 255, 0.2)');
                        usersChartGradient.addColorStop(1, 'rgba(74, 105, 255, 0)');

                        new Chart(usersChartCtx, {
                            type: 'line',
                            data: {
                                labels: data.labels,
                                datasets: [{
                                    label: 'Users',
                                    data: data.data,
                                    borderColor: '#8A3FFC',
                                    backgroundColor: usersChartGradient,
                                    fill: true,
                                    tension: 0.4,
                                    pointBackgroundColor: '#FFFFFF',
                                    pointBorderColor: '#8A3FFC',
                                    pointBorderWidth: 2,
                                    pointRadius: 5
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: { legend: { display: false } },
                                scales: {
                                    y: { beginAtZero: false, grid: { drawBorder: false } },
                                    x: { grid: { display: false } }
                                }
                            }
                        });
                    })
                    .catch(error => {
                        console.error('Kullanıcı grafiği yüklenirken hata:', error);
                    });
            }

            // Mesaj trafiği grafiğini yükle
            function loadMessageTrafficChart() {
                fetch('/Account/GetMessageTrafficData')
                    .then(response => response.json())
                    .then(data => {
                        if (data.error) {
                            console.error('Mesaj trafiği hatası:', data.error);
                            return;
                        }

                        const messageTrafficCtx = document.getElementById('messageTrafficChart').getContext('2d');
                        new Chart(messageTrafficCtx, {
                            type: 'bar',
                            data: {
                                labels: data.labels,
                                datasets: [
                                    {
                                        label: 'Messages',
                                        data: data.data,
                                        backgroundColor: '#4A5568',
                                        borderRadius: 4,
                                        borderSkipped: false,
                                    }
                                ]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: { legend: { position: 'top', align: 'start' } },
                                scales: {
                                    y: { beginAtZero: true, grid: { drawBorder: false } },
                                    x: { grid: { display: false } }
                                },
                                barPercentage: 0.5,
                                categoryPercentage: 0.5
                            }
                        });
                    })
                    .catch(error => {
                        console.error('Mesaj trafiği grafiği yüklenirken hata:', error);
                    });
            }
        });
    </script>
}