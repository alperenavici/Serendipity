@model Conversation.Core.DTOs.ConversationViewModel

@{
    ViewData["Title"] = "Sohbet";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

    <link rel="stylesheet" href="~/css/main.css" />

<div class="chat-container">

    <aside class="chat-sidebar">
        <div class="user-profile">
            <img src="@Model.CurrentUser.AvatarUrl" alt="@Model.CurrentUser.UserName">
            <div class="user-info">
                <h5>@Model.CurrentUser.UserName</h5>
                <p>@Model.CurrentUser.Role</p>
            </div>
            <i class="fa-solid fa-pen-to-square edit-icon"></i>
        </div>

        <div class="search-bar">
            <form asp-action="SearchConversations" asp-controller="Account" method="get" style="display: flex; align-items: center; width: 100%;">
                <i class="fa-solid fa-magnifying-glass"></i>
                <input type="text" name="query" placeholder="Search conversations..." style="flex: 1; border: none; outline: none; background: transparent;" value="@ViewBag.SearchQuery">
                <a href="@Url.Action("StartNewConversation", "Account")" class="refresh-button" title="Start New Conversation">
                    <i class="fa-solid fa-plus"></i>
                </a>
            </form>
        </div>

        <ul class="conversation-list">
            @if (Model.ConversationList != null && Model.ConversationList.Any())
            {
                @foreach (var conversation in Model.ConversationList)
                {
                    <li class="conversation-list-item @(conversation.IsActive ? "active" : "")" data-conversation-id="@conversation.Id">
                        <a href="@Url.Action("Main", "Account", new { conversationId = conversation.Id })" style="display: flex; text-decoration: none; color: inherit;">
                            <img src="@conversation.AvatarUrl" alt="@conversation.Name">
                            <div class="conversation-details">
                                <div class="conversation-header">
                                    <span class="name">@conversation.Name</span>
                                    <span class="time">@conversation.LastMessageTime</span>
                                </div>
                                <p class="last-message">@conversation.LastMessage</p>
                            </div>
                            @if (conversation.UnreadCount > 0)
                            {
                                <div class="unread-badge">@conversation.UnreadCount</div>
                            }
                        </a>
                    </li>
                }
            }
            else
            {
                <li class="no-conversations">
                    <div style="text-align: center; padding: 20px; color: #666;">
                        <i class="fa-regular fa-comment" style="font-size: 48px; margin-bottom: 10px;"></i>
                        <p>Henüz konuşmanız yok</p>
                        <small><a href="@Url.Action("StartNewConversation", "Account")">Yeni bir sohbet başlatın</a></small>
                    </div>
                </li>
            }
        </ul>
    </aside>

    <!-- ORTA SÜTUN: ANA SOHBET EKRANI -->
        <main class="chat-main">
        @if (Model.ActiveChatUser != null)
        {
            <header class="chat-header">
                <img src="@Model.ActiveChatUser.AvatarUrl" alt="@Model.ActiveChatUser.Name">
                <span class="name">@Model.ActiveChatUser.Name</span>
                <div class="actions">
                    <i class="fa-solid fa-magnifying-glass"></i>
                    <i class="fa-regular fa-heart"></i>
                    <i class="fa-regular fa-bell"></i>
                </div>
            </header>
        }
        else
        {
            <header class="chat-header">
                <div style="text-align: center; width: 100%; padding: 20px;">
                    <span class="name">Hoş Geldiniz!</span>
                </div>
            </header>
        }

        <div class="message-area" id="messageArea">
                @if (Model?.Messages != null && Model.Messages.Any())
                {
                    foreach (var message in Model.Messages)
                    {
                        var cssClass = message.IsOutgoing ? "outgoing" : "incoming";
                        <div class="message @cssClass">
                            @if (!message.IsOutgoing)
                            {
                                <img class="avatar" src="https://i.pravatar.cc/150?u=@message.SenderName" alt="@message.SenderName" />
                            }

                            <div class="message-bubble">
                                @message.Content <br />
                                <small>@message.SentDate.ToString("dd.MM.yyyy HH:mm")</small>
                            </div>

                            @if (message.IsOutgoing)
                            {
                                <img class="avatar" src="https://i.pravatar.cc/150?u=@message.SenderName" alt="@message.SenderName" />
                            }
                        </div>
                    }
                }
                else
                {
                <p>Henüz mesaj yok. Sohbeti başlatın!</p>
                }
            </div>

            @if (Model.ActiveChatUser != null)
            {
                <footer class="chat-composer">
                    <form asp-action="SendMessage" asp-controller="Account" method="post" style="display: flex; align-items: center; width: 100%;">
                        <input type="hidden" name="conversationId" value="@ViewBag.ActiveConversationId">
                        <div class="composer-actions">
                            <i class="fa-solid fa-microphone"></i>
                        </div>
                        <input type="text" name="message" id="messageInput" placeholder="Write Something..." required>
                        <div class="composer-actions">
                            <i class="fa-solid fa-paperclip"></i>
                            <i class="fa-solid fa-camera"></i>
                            <i class="fa-regular fa-face-smile"></i>
                        </div>
                        <button type="submit" class="send-button" id="sendButton">
                            <i class="fa-solid fa-paper-plane"></i>
                        </button>
                    </form>
                </footer>
            }
        </main>

    <aside class="chat-info-panel">
        @if (Model.ActiveChatUser != null)
        {
            <img src="@Model.ActiveChatUser.AvatarUrl" alt="@Model.ActiveChatUser.Name" class="profile-pic">
            <h5 class="name">@Model.ActiveChatUser.Name</h5>
            <p class="title">@Model.ActiveChatUser.Role</p>

            <div class="action-links">
                <a href="#"><i class="fa-solid fa-user-group"></i> View Friends</a>
                <a href="#"><i class="fa-regular fa-heart"></i> Add to Favorites</a>
            </div>

            <div class="attachments-section">
                <h6>Attachments</h6>
                <div class="attachment-grid">
                    <div class="attachment-item"> <i class="fa-solid fa-file-pdf"></i> <p>PDF</p> </div>
                    <div class="attachment-item"> <i class="fa-solid fa-film"></i> <p>VIDEO</p> </div>
                    <div class="attachment-item"> <i class="fa-solid fa-music"></i> <p>MP3</p> </div>
                    <div class="attachment-item"> <i class="fa-solid fa-image"></i> <p>IMAGE</p> </div>
                </div>
                <button class="btn-view-all">View All</button>
            </div>
        }
        else
        {
            <div style="text-align: center; padding: 40px 20px; color: #666;">
                <i class="fa-regular fa-user" style="font-size: 48px; margin-bottom: 15px;"></i>
                <h5>Konuşma Seçin</h5>
                <p>Detayları görmek için sol taraftan bir konuşma seçin.</p>
            </div>
        }
    </aside>

</div>

@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script>
        let connection;
        let currentConversationId = '@ViewBag.ActiveConversationId';

        function initializeSignalR() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .build();

            connection.start().then(function () {
                console.log("SignalR Connected");
                if (currentConversationId) {
                    connection.invoke("JoinConversation", currentConversationId);
                }
            }).catch(function (err) {
                console.error(err.toString());
            });

            connection.on("ReceiveMessage", function (message) {
                addMessageToChat(message);
            });

            connection.on("NewConversationStarted", function (data) {
                location.reload(); 
        }

        function addMessageToChat(message) {
            const messageArea = document.getElementById('messageArea');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${message.isOutgoing ? 'outgoing' : 'incoming'}`;
            
            messageDiv.innerHTML = `
                ${!message.isOutgoing ? `<img class="avatar" src="https://i.pravatar.cc/150?u=${message.senderName}" alt="${message.senderName}" />` : ''}
                <div class="message-bubble">
                    ${message.content} <br />
                    <small>${message.sentDate}</small>
                </div>
                ${message.isOutgoing ? `<img class="avatar" src="https://i.pravatar.cc/150?u=${message.senderName}" alt="${message.senderName}" />` : ''}
            `;
            
            messageArea.appendChild(messageDiv);
            messageArea.scrollTop = messageArea.scrollHeight;
        }

        document.addEventListener("DOMContentLoaded", function() {
            initializeSignalR();

            const messageInput = document.getElementById('messageInput');
            if (messageInput) {
                messageInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        document.getElementById('sendButton').click();
                    }
                });
            }

            const searchInput = document.querySelector('input[name="query"]');
            if (searchInput) {
                let searchTimeout;
                searchInput.addEventListener('input', function() {
                    clearTimeout(searchTimeout);
                    searchTimeout = setTimeout(() => {
                        if (this.value.length >= 2 || this.value.length === 0) {
                            this.form.submit();
                        }
                    }, 500);
                });
            }
        });
    </script>
}
